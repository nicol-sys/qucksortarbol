#include <iostream>
#include <vector>
using namespace std;

struct Nodo {
    int dato;
    Nodo* izquierda;
    Nodo* derecha;
};

void insertar(Nodo*&, int);
void MostrararbolPreorden(Nodo*);
void MostrararbolInorden(Nodo*);
void MostrararbolPosorden(Nodo*);
bool busquedapreorden(Nodo*, int);
bool busquedainorden(Nodo*, int);
bool busquedaposorden(Nodo*, int);
void eliminar(Nodo*&, int);
void Quicksort(vector<int>&, int, int);
void OrdenarArbol(Nodo*&, vector<int>&, int&);
void ConstruirArbol(Nodo*&, vector<int>&, int, int);

int main() {
    Nodo* arbol = NULL;
    vector<int> datos; // Vector para almacenar los datos

    int opcion, dato;

    while (true) {
        cout << "MENU" << endl;
        cout << "1. Insertar un número" << endl;
        cout << "2. Buscar en preorden" << endl;
        cout << "3. Buscar en inorden" << endl;
        cout << "4. Buscar en posorden" << endl;
        cout << "5. Eliminar un Nodo" << endl;
        cout << "6. Ordenar el árbol" << endl; // Nueva opción para ordenar
        cout << "7. Salir" << endl;
        cin >> opcion;

        switch (opcion) {
            case 1:
                cout << "Digite un número: ";
                cin >> dato;
                insertar(arbol, dato);
                datos.push_back(dato); // Agregar el dato al vector
                break;
            case 2:
                cout << "Digite un número: ";
                cin >> dato;
                if (busquedapreorden(arbol, dato)) {
                    cout << "El elemento " << dato << " ha sido encontrado en preorden" << endl;
                    MostrararbolPreorden(arbol);
                    cout << endl;
                } else {
                    cout << "El elemento " << dato << " no ha sido encontrado en preorden" << endl;
                }
                break;
            case 3:
                cout << "Digite un número: ";
                cin >> dato;
                if (busquedainorden(arbol, dato)) {
                    cout << "El elemento " << dato << " ha sido encontrado en inorden" << endl;
                    MostrararbolInorden(arbol);
                    cout << endl;
                } else {
                    cout << "El elemento " << dato << " no ha sido encontrado en inorden" << endl;
                }
                break;
            case 4:
                cout << "Digite un número: ";
                cin >> dato;
                if (busquedaposorden(arbol, dato)) {
                    cout << "El elemento " << dato << " ha sido encontrado en posorden" << endl;
                    MostrararbolPosorden(arbol);
                    cout << endl;
                } else {
                    cout << "El elemento " << dato << " no ha sido encontrado en posorden" << endl;
                }
                break;
            case 5:
                cout << "Digite un número a eliminar: ";
                cin >> dato;
                eliminar(arbol, dato);
                cout << "El elemento " << dato << " ha sido eliminado" << endl;
                break;
            case 6:
                // Ordenar el árbol
                if (!datos.empty()) {
                    Quicksort(datos, 0, datos.size() - 1);
                    arbol = NULL; // Borrar el árbol existente
                    int index = 0;
                    OrdenarArbol(arbol, datos, index); // Reconstruir el árbol
                    cout << "El árbol ha sido ordenado" << endl;
                } else {
                    cout << "El árbol está vacío" << endl;
                }
                break;
            case 7:
                cout << "Saliendo del programa." << endl;
                return 0;
            default:
                cout << "Opción no válida" << endl;
        }
    }

    return 0;
}

void Quicksort(vector<int>& arr, int low, int high) {
    if (low < high) {
        int pivot = arr[high];
        int i = low - 1;

        for (int j = low; j <= high - 1; j++) {
            if (arr[j] < pivot) {
                i++;
                swap(arr[i], arr[j]);
            }
        }

        swap(arr[i + 1], arr[high]);
        int pivotIndex = i + 1;

        Quicksort(arr, low, pivotIndex - 1);
        Quicksort(arr, pivotIndex + 1, high);
    }
}

void OrdenarArbol(Nodo*& arbol, vector<int>& datos, int& index) {
    if (index >= datos.size()) {
        return;
    }

    insertar(arbol, datos[index]);
    index++;
    OrdenarArbol(arbol, datos, index);
}

void ConstruirArbol(Nodo*& arbol, vector<int>& datos, int low, int high) {
    if (low > high) {
        return;
    }

    int mid = (low + high) / 2;
    insertar(arbol, datos[mid]);

    ConstruirArbol(arbol, datos, low, mid - 1);
    ConstruirArbol(arbol, datos, mid + 1, high);
}